{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom datetime import datetime\nimport pytz\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Set up logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Configure Indian timezone\nINDIAN_TZ = pytz.timezone('Asia/Kolkata')\n\ndef get_indian_time():\n    \"\"\"Get current time in Indian timezone\"\"\"\n    return datetime.now(INDIAN_TZ)\n\ndef format_indian_time(dt=None, format_str='%Y-%m-%d %H:%M:%S'):\n    \"\"\"Format datetime in Indian timezone\"\"\"\n    if dt is None:\n        dt = get_indian_time()\n    elif dt.tzinfo is None:\n        # Convert naive datetime to Indian timezone\n        dt = INDIAN_TZ.localize(dt)\n    elif dt.tzinfo != INDIAN_TZ:\n        # Convert to Indian timezone\n        dt = dt.astimezone(INDIAN_TZ)\n    return dt.strftime(format_str)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\nlogin_manager = LoginManager()\n\n# Create the app\napp = Flask(__name__)\n# Hardcoded configuration - no environment variables needed\napp.secret_key = os.environ.get(\"SESSION_SECRET\") or \"battery_erp_secret_key_hardcoded_2025_production\"\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)  # needed for url_for to generate with https\n\n# Configure the database - use PostgreSQL for production, fallback to hardcoded values\ndatabase_url = os.environ.get(\"DATABASE_URL\") or \"postgresql://erp_user:erp_secure_pass_2025@localhost:5432/battery_repair_db\"\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_url\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\n# Initialize extensions\ndb.init_app(app)\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'auth.login'  # type: ignore\nlogin_manager.login_message = 'Please log in to access this page.'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    from models import User\n    return User.query.get(int(user_id))\n\ndef initialize_database():\n    \"\"\"Initialize database with default users and settings\"\"\"\n    from models import User, SystemSettings\n    from werkzeug.security import generate_password_hash\n    \n    # Create default users if they don't exist\n    if not User.query.filter_by(username='admin').first():\n        admin_user = User()\n        admin_user.username = 'admin'\n        admin_user.password_hash = generate_password_hash('admin123')\n        admin_user.role = 'admin'\n        admin_user.full_name = 'Administrator'\n        db.session.add(admin_user)\n    \n    if not User.query.filter_by(username='staff').first():\n        staff_user = User()\n        staff_user.username = 'staff'\n        staff_user.password_hash = generate_password_hash('staff123')\n        staff_user.role = 'shop_staff'\n        staff_user.full_name = 'Shop Staff'\n        db.session.add(staff_user)\n    \n    if not User.query.filter_by(username='technician').first():\n        tech_user = User()\n        tech_user.username = 'technician'\n        tech_user.password_hash = generate_password_hash('tech123')\n        tech_user.role = 'technician'\n        tech_user.full_name = 'Technician'\n        db.session.add(tech_user)\n    \n    # Initialize system settings\n    default_settings = [\n        ('shop_name', 'Battery Repair Service'),\n        ('battery_id_prefix', 'BAT'),\n        ('battery_id_start', '1'),\n        ('battery_id_padding', '4')\n    ]\n    \n    for key, value in default_settings:\n        if not SystemSettings.query.filter_by(setting_key=key).first():\n            setting = SystemSettings()\n            setting.setting_key = key\n            setting.setting_value = value\n            db.session.add(setting)\n    \n    try:\n        db.session.commit()\n    except Exception as e:\n        logging.error(f\"Error creating default users and settings: {e}\")\n        db.session.rollback()\n\nwith app.app_context():\n    # Import models to ensure tables are created\n    import models\n    db.create_all()\n    initialize_database()\n\n# Register blueprints\nfrom auth import auth_bp\nfrom routes import main_bp\n\napp.register_blueprint(auth_bp)\napp.register_blueprint(main_bp)\n\n# Add template globals for time functions\n@app.template_global()\ndef current_indian_time():\n    \"\"\"Template function to get current Indian time\"\"\"\n    return get_indian_time()\n\n@app.template_global()\ndef format_time(dt, format_str='%d/%m/%Y %H:%M'):\n    \"\"\"Template function to format time in Indian timezone\"\"\"\n    return format_indian_time(dt, format_str)\n","size_bytes":4510},"auth.py":{"content":"from flask import Blueprint, render_template, request, redirect, url_for, flash\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom werkzeug.security import check_password_hash\nfrom models import User\n\nauth_bp = Blueprint('auth', __name__)\n\n@auth_bp.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        username = request.form.get('username')\n        password = request.form.get('password')\n        \n        if not username or not password:\n            flash('Please enter both username and password.', 'error')\n            return render_template('login.html')\n        \n        user = User.query.filter_by(username=username).first()\n        \n        if user and check_password_hash(user.password_hash, password):\n            login_user(user)\n            next_page = request.args.get('next')\n            if next_page:\n                return redirect(next_page)\n            return redirect(url_for('main.dashboard'))\n        else:\n            flash('Invalid username or password.', 'error')\n    \n    return render_template('login.html')\n\n@auth_bp.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('You have been logged out successfully.', 'success')\n    return redirect(url_for('auth.login'))\n","size_bytes":1289},"docker-install.md":{"content":"# Docker Installation Guide - Zero Configuration Required!\n\n## Prerequisites\n- Docker installed on your system\n- Docker Compose installed\n\n## Super Simple Start (No Configuration Needed!)\n\n### Option 1: One-Click Startup Scripts\n\n**For Linux/Mac:**\n```bash\n./run-docker.sh\n```\n\n**For Windows:**\n```\nrun-docker.bat\n```\n\n### Option 2: Manual Docker Commands\n\n```bash\ndocker-compose up -d --build\n```\n\n## That's it! \n- Everything is pre-configured and hardcoded\n- No environment variables to set\n- No configuration files to edit\n- Access the application at: `http://localhost:5000`\n\n## Default Configuration\n\n### Database\n- **Type**: PostgreSQL\n- **Host**: postgres (internal Docker network)\n- **Database**: battery_repair\n- **User**: battery_user\n- **Password**: battery_password\n\n### Application\n- **Port**: 5000\n- **Session Secret**: Change this in production!\n\n## First Time Setup\n\n1. Access the application at `http://localhost:5000`\n2. The application will automatically create database tables\n3. Create your first admin user through the interface\n\n## Production Deployment\n\n### Security Configuration\n1. **Change the session secret**:\n   ```yaml\n   environment:\n     SESSION_SECRET: \"your-super-secret-key-here\"\n   ```\n\n2. **Change database credentials**:\n   ```yaml\n   environment:\n     POSTGRES_PASSWORD: \"your-secure-password\"\n   ```\n\n3. **Use environment file** (recommended):\n   Copy the example environment file:\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Edit `.env` file with your secure values:\n   ```\n   DATABASE_URL=postgresql://battery_user:secure_password@postgres:5432/battery_repair\n   SESSION_SECRET=your-super-secret-key-here\n   ```\n\n   Update docker-compose.yml:\n   ```yaml\n   web:\n     env_file: .env\n   ```\n\n### Volume Persistence\nThe configuration includes persistent volumes for:\n- PostgreSQL data: `postgres_data`\n- Instance files: `./instance`\n\n## Management Commands\n\n### Start services\n```bash\ndocker-compose up -d\n```\n\n### Stop services\n```bash\ndocker-compose down\n```\n\n### View logs\n```bash\ndocker-compose logs -f web\ndocker-compose logs -f postgres\n```\n\n### Backup database\n```bash\ndocker-compose exec postgres pg_dump -U battery_user battery_repair > backup.sql\n```\n\n### Restore database\n```bash\ndocker-compose exec -T postgres psql -U battery_user battery_repair < backup.sql\n```\n\n### Update application\n```bash\ndocker-compose down\ndocker-compose build --no-cache\ndocker-compose up -d\n```\n\n## Troubleshooting\n\n### Application won't start\n1. Check logs: `docker-compose logs web`\n2. Ensure PostgreSQL is running: `docker-compose ps`\n3. Verify environment variables\n\n### Database connection issues\n1. Wait for PostgreSQL to fully start (can take 30-60 seconds on first run)\n2. Check database logs: `docker-compose logs postgres`\n3. Verify database credentials\n\n### Port conflicts\nIf port 5000 is already in use, change it in docker-compose.yml:\n```yaml\nports:\n  - \"8080:5000\"  # Access app on port 8080\n```\n\n## Development Mode\n\nFor development with live code reloading:\n\n1. **Create development docker-compose**:\n   ```yaml\n   # docker-compose.dev.yml\n   version: '3.8'\n   services:\n     web:\n       build: .\n       ports:\n         - \"5000:5000\"\n       environment:\n         DATABASE_URL: postgresql://battery_user:battery_password@postgres:5432/battery_repair\n         SESSION_SECRET: dev-secret-key\n         FLASK_ENV: development\n       volumes:\n         - .:/app\n       command: [\"python\", \"main.py\"]\n   ```\n\n2. **Run development environment**:\n   ```bash\n   docker-compose -f docker-compose.yml -f docker-compose.dev.yml up\n   ```\n\n## Support\n\nFor issues or questions:\n1. Check application logs\n2. Verify Docker and Docker Compose versions\n3. Ensure all environment variables are set correctly","size_bytes":3738},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"migrate_db.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nDatabase initialization script\n\"\"\"\nimport os\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.security import generate_password_hash\nimport logging\n\n# Set up logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\n# Create Flask app for migration\nmigration_app = Flask(__name__)\nmigration_app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///battery_repair.db\"\nmigration_app.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\nmigration_db = SQLAlchemy(model_class=Base)\nmigration_db.init_app(migration_app)\n\n# Import models after db is set up\nwith migration_app.app_context():\n    from datetime import datetime\n    \n    class User(migration_db.Model):\n        id = migration_db.Column(migration_db.Integer, primary_key=True)\n        username = migration_db.Column(migration_db.String(64), unique=True, nullable=False)\n        password_hash = migration_db.Column(migration_db.String(256), nullable=False)\n        role = migration_db.Column(migration_db.String(20), nullable=False)\n        full_name = migration_db.Column(migration_db.String(100), nullable=False)\n        created_at = migration_db.Column(migration_db.DateTime, default=datetime.utcnow)\n        is_active = migration_db.Column(migration_db.Boolean, default=True)\n\n    class SystemSettings(migration_db.Model):\n        id = migration_db.Column(migration_db.Integer, primary_key=True)\n        setting_key = migration_db.Column(migration_db.String(50), unique=True, nullable=False)\n        setting_value = migration_db.Column(migration_db.Text, nullable=False)\n        updated_at = migration_db.Column(migration_db.DateTime, default=datetime.utcnow)\n    \n    # Remove old database if exists\n    db_path = 'battery_repair.db'\n    if os.path.exists(db_path):\n        os.remove(db_path)\n        print(f\"Removed old database: {db_path}\")\n    \n    # Create all tables\n    migration_db.create_all()\n    print(\"Created all database tables with new schema\")\n    \n    # Create default users\n    try:\n        admin_user = User(\n            username='admin',\n            password_hash=generate_password_hash('admin123'),\n            role='admin',\n            full_name='Administrator',\n            is_active=True\n        )\n        migration_db.session.add(admin_user)\n        \n        staff_user = User(\n            username='staff',\n            password_hash=generate_password_hash('staff123'),\n            role='shop_staff',\n            full_name='Shop Staff',\n            is_active=True\n        )\n        migration_db.session.add(staff_user)\n        \n        tech_user = User(\n            username='technician',\n            password_hash=generate_password_hash('tech123'),\n            role='technician',\n            full_name='Technician',\n            is_active=True\n        )\n        migration_db.session.add(tech_user)\n        \n        # Initialize system settings\n        default_settings = [\n            ('shop_name', 'Battery Repair Service'),\n            ('battery_id_prefix', 'BAT'),\n            ('battery_id_start', '1'),\n            ('battery_id_padding', '4')\n        ]\n        \n        for key, value in default_settings:\n            setting = SystemSettings(setting_key=key, setting_value=value)\n            migration_db.session.add(setting)\n        \n        migration_db.session.commit()\n        print(\"Successfully created default users and settings!\")\n        print(\"Default logins:\")\n        print(\"  Admin: username='admin', password='admin123'\")\n        print(\"  Staff: username='staff', password='staff123'\")\n        print(\"  Technician: username='technician', password='tech123'\")\n        \n    except Exception as e:\n        print(f\"Error creating users: {e}\")\n        migration_db.session.rollback()","size_bytes":3884},"models.py":{"content":"from app import db\nfrom flask_login import UserMixin\nfrom datetime import datetime\nfrom sqlalchemy import func\nimport pytz\n\n# Indian timezone\nINDIAN_TZ = pytz.timezone('Asia/Kolkata')\n\ndef get_indian_now():\n    \"\"\"Get current time in Indian timezone\"\"\"\n    return datetime.now(INDIAN_TZ).replace(tzinfo=None)  # Store as naive datetime\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    role = db.Column(db.String(20), nullable=False)  # 'admin', 'shop_staff', or 'technician'\n    full_name = db.Column(db.String(100), nullable=False)\n    created_at = db.Column(db.DateTime, default=get_indian_now)\n    active = db.Column(db.Boolean, default=True)\n\nclass Customer(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    mobile = db.Column(db.String(15), nullable=False)\n    mobile_secondary = db.Column(db.String(15), nullable=True)\n    created_at = db.Column(db.DateTime, default=get_indian_now)\n    \n    # Relationship with batteries\n    batteries = db.relationship('Battery', backref='customer', lazy=True)\n\nclass Battery(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    battery_id = db.Column(db.String(20), unique=True, nullable=False)  # BAT0001, BAT0002, etc.\n    customer_id = db.Column(db.Integer, db.ForeignKey('customer.id'), nullable=False)\n    battery_type = db.Column(db.String(100), nullable=False)\n    voltage = db.Column(db.String(10), nullable=False)  # e.g., \"12V\"\n    capacity = db.Column(db.String(10), nullable=False)  # e.g., \"100Ah\"\n    status = db.Column(db.String(20), default='Received', nullable=False)  # Received, Pending, Ready, Delivered, Returned, Not Repairable\n    inward_date = db.Column(db.DateTime, default=get_indian_now)\n    service_price = db.Column(db.Float, default=0.0)\n    pickup_charge = db.Column(db.Float, default=0.0)  # Extra charge for pickup service\n    is_pickup = db.Column(db.Boolean, default=False)  # Whether battery was picked up by employees\n    \n    # Relationship with status history and staff notes\n    status_history = db.relationship('BatteryStatusHistory', backref='battery', lazy=True, cascade='all, delete-orphan')\n    staff_notes = db.relationship('BatteryStaffNote', backref='battery', lazy=True, cascade='all, delete-orphan')\n    \n    @staticmethod\n    def generate_next_battery_id():\n        \"\"\"Generate the next sequential battery ID using system settings\"\"\"\n        from app import db\n        \n        prefix = SystemSettings.get_setting('battery_id_prefix', 'BAT')\n        start_num = int(SystemSettings.get_setting('battery_id_start', '1'))\n        padding = int(SystemSettings.get_setting('battery_id_padding', '4'))\n        \n        last_battery = Battery.query.order_by(Battery.id.desc()).first()\n        if last_battery:\n            # Extract number from last battery ID (e.g., BAT0001 -> 1)\n            try:\n                last_num = int(last_battery.battery_id[len(prefix):])\n                next_num = last_num + 1\n            except (ValueError, IndexError):\n                next_num = start_num\n        else:\n            next_num = start_num\n        \n        return f\"{prefix}{next_num:0{padding}d}\"\n\nclass BatteryStatusHistory(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    battery_id = db.Column(db.Integer, db.ForeignKey('battery.id'), nullable=False)\n    status = db.Column(db.String(20), nullable=False)\n    comments = db.Column(db.Text)\n    updated_by = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    updated_at = db.Column(db.DateTime, default=get_indian_now)\n    \n    # Relationship\n    user = db.relationship('User', backref='status_updates')\n\nclass BatteryStaffNote(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    battery_id = db.Column(db.Integer, db.ForeignKey('battery.id'), nullable=False)\n    note = db.Column(db.Text, nullable=False)\n    note_type = db.Column(db.String(50), default='followup')  # followup, reminder, issue, resolved\n    created_by = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    created_at = db.Column(db.DateTime, default=get_indian_now)\n    is_resolved = db.Column(db.Boolean, default=False)\n    \n    # Relationship\n    user = db.relationship('User', backref='staff_notes')\n\nclass SystemSettings(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    setting_key = db.Column(db.String(50), unique=True, nullable=False)\n    setting_value = db.Column(db.Text, nullable=False)\n    updated_at = db.Column(db.DateTime, default=get_indian_now)\n    \n    @staticmethod\n    def get_setting(key, default_value=''):\n        setting = SystemSettings.query.filter_by(setting_key=key).first()\n        return setting.setting_value if setting else default_value\n    \n    @staticmethod\n    def set_setting(key, value):\n        setting = SystemSettings.query.filter_by(setting_key=key).first()\n        if setting:\n            setting.setting_value = value\n            setting.updated_at = get_indian_now()\n        else:\n            setting = SystemSettings()\n            setting.setting_key = key\n            setting.setting_value = value\n            from app import db\n            db.session.add(setting)\n        return setting\n","size_bytes":5360},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-login>=0.6.3\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"sqlalchemy>=2.0.42\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":355},"readme.md":{"content":"# Battery Repair ERP System\n\n## Overview\n\nThis is a Battery Repair Enterprise Resource Planning (ERP) system built with Flask that manages battery repair services for a shop. The system handles customer registration, battery intake, technician workflow management, status tracking, and billing. It provides role-based access for shop staff and technicians, with shop staff handling customer interactions and battery intake, while technicians manage the repair workflow and status updates.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Backend Architecture\n- **Framework**: Flask web framework with Python\n- **Database**: SQLite for local storage with SQLAlchemy ORM\n- **Authentication**: Flask-Login for session management with role-based access control\n- **Models**: Four main entities - User, Customer, Battery, and BatteryStatusHistory\n- **Blueprint Structure**: Modular routing with separate auth and main blueprints\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templates with base template inheritance\n- **CSS Framework**: Bootstrap with dark theme support\n- **Icons**: Font Awesome for UI icons\n- **Print Support**: Dedicated print stylesheet for receipts and bills\n- **Responsive Design**: Mobile-friendly interface with Bootstrap grid system\n\n### Data Models\n- **User**: Role-based system (shop_staff, technician) with password hashing\n- **Customer**: Basic contact information with relationship to batteries\n- **Battery**: Sequential ID generation (BAT0001, BAT0002) with status tracking\n- **BatteryStatusHistory**: Audit trail for status changes with timestamps and comments\n\n### Authentication & Authorization\n- **Login System**: Username/password authentication with secure password hashing\n- **Role-based Access**: Shop staff can register batteries, technicians can update status\n- **Session Management**: Flask-Login handles user sessions and login requirements\n- **Default Users**: Seeded staff and technician accounts for immediate access\n\n### Business Logic\n- **Battery Workflow**: Received → Diagnosing → Repairing → Ready → Delivered\n- **Auto ID Generation**: Sequential battery IDs with BAT prefix\n- **Status Tracking**: Complete audit trail of status changes with timestamps\n- **Billing System**: Service pricing with printable receipts and bills\n\n## External Dependencies\n\n### Python Packages\n- **Flask**: Web framework for application structure\n- **Flask-SQLAlchemy**: Database ORM for data persistence\n- **Flask-Login**: User session and authentication management\n- **Werkzeug**: Password hashing and security utilities\n\n### Frontend Libraries\n- **Bootstrap**: CSS framework for responsive UI design\n- **Font Awesome**: Icon library for enhanced user interface\n- **Print CSS**: Custom stylesheet for document printing\n\n### Database\n- **SQLite**: Local file-based database for data storage\n- **SQLAlchemy**: ORM layer with declarative base for model definitions\n\n### Infrastructure\n- **Development Server**: Flask built-in development server\n- **Static Files**: CSS and print stylesheets served via Flask static file handling\n- **Template Rendering**: Jinja2 template engine for dynamic HTML generation\n","size_bytes":3209},"replit.md":{"content":"# Battery Repair ERP System\n\n## Project Overview\nA Flask-based ERP system for battery repair shops with features for:\n- Customer and battery management\n- Status tracking and history\n- User authentication (admin, staff, technician roles)\n- Receipt and bill generation\n- Search functionality\n\n## Project Architecture\n- **Backend**: Flask with SQLAlchemy ORM\n- **Database**: PostgreSQL (migrated from SQLite for Replit compatibility)\n- **Authentication**: Flask-Login with role-based access\n- **Deployment**: Gunicorn WSGI server\n\n## User Preferences\n- Prefer web-based interfaces over API endpoints\n- Focus on clean, functional UI\n- Robust security practices required\n\n## Recent Changes\n- **2025-08-02**: Internal clock system with accurate Indian timezone\n- Added live clock display in navigation bar with real-time updates using system time\n- All database timestamps now use Indian Standard Time (IST) automatically\n- Fixed recent batteries filter to show only pending and ready status batteries\n- Clock syncs with system time using proper JavaScript timezone handling\n- **2025-08-02**: Major workflow and feature enhancements (Migration + New Features)\n- Extended battery status workflow: Added \"Delivered\", \"Returned\", and \"Not Repairable\" status options\n- Implemented comprehensive staff notes system for battery follow-ups with note types (followup, reminder, issue, resolved)\n- Added QR code sticker printing functionality for battery identification labels with offline fallback\n- Created offline-compatible CSS styles for Docker container deployment without internet access\n- Updated dashboard with 5-card statistics layout including \"Not Repairable\" count\n- Enhanced battery details page with staff notes, delivery actions, and complete status history\n- Added dedicated \"Delivered Batteries\" page to view all delivered, returned, and not repairable batteries\n- Integrated note system into finished batteries page with edit icons and modals\n- Added delivery/return buttons directly on bill page for immediate status updates\n- Made all battery IDs clickable throughout the system (Ready → Bill page, Others → Details page)\n- Updated Docker configuration for offline operation with OFFLINE_MODE environment flag\n- Added delivery/return tracking with comments and staff assignment\n- Enhanced technician panel with simplified Pending/Ready/Not Repairable workflow\n- Updated all status badges throughout system with consistent color coding\n- Added \"Delivered\" and \"Not Repairable\" navigation menu items for staff and admin users\n- Enhanced finished batteries page with quick note adding functionality\n- Updated search results to use new status badges and detail page linking\n- Created dedicated \"Not Repairable Batteries\" page with specialized functionality\n- Made all dashboard statistic cards clickable with hover effects for quick navigation\n- Separated delivered/returned batteries from not repairable batteries in dedicated pages\n- Added warranty return functionality to reopen completed batteries for warranty work\n- Enhanced finished and delivered battery pages with warranty reopening capability\n- **2025-08-02**: Hardcoded Docker configuration for zero-setup deployment\n- All credentials and settings hardcoded in docker-compose.yml and Dockerfile\n- Added automated startup scripts (run-docker.sh and run-docker.bat) for one-click deployment\n- Docker setup requires no configuration - just run and use\n- Added comprehensive \"All Bills\" page with revenue tracking, status filtering, and bulk actions\n- Enhanced navigation with All Bills menu item and Quick Actions integration\n- **2025-08-02**: Enhanced billing and revenue system improvements\n- Updated revenue calculations to only include delivered/returned batteries (not ready status)\n- Enhanced all battery listing pages to show total prices including pickup charges\n- Enabled bill printing from all sections (delivered, finished, all batteries) not just ready\n- Bills now available for all completed batteries with service charges\n- **2025-08-01**: Successfully migrated from Replit Agent to Replit environment\n- Database migrated from SQLite to PostgreSQL for production readiness\n- Added ProxyFix middleware for proper HTTPS URL generation\n- Updated configuration for environment variables\n- Fixed backup and restore functionality - now fully operational\n- Added pickup service charge functionality for batteries collected from customer sites\n- Enhanced revenue calculations to include pickup service charges\n\n## Environment Variables Required\n- `SESSION_SECRET`: Flask session secret key\n- `DATABASE_URL`: PostgreSQL connection string (auto-provided by Replit)\n\n## Database Models\n- User: Authentication and role management\n- Customer: Customer information\n- Battery: Battery tracking with auto-generated IDs\n- BatteryStatusHistory: Status change tracking\n- SystemSettings: Configurable system parameters","size_bytes":4876},"routes.py":{"content":"from flask import Blueprint, render_template, request, redirect, url_for, flash, make_response, jsonify, send_file\nfrom flask_login import login_required, current_user\nfrom app import db, get_indian_time, format_indian_time\nfrom models import User, Customer, Battery, BatteryStatusHistory, SystemSettings, BatteryStaffNote, get_indian_now\nfrom werkzeug.security import generate_password_hash\nfrom datetime import datetime\nfrom sqlalchemy import func\nimport csv\nimport io\nimport json\nimport tempfile\nimport os\n\nmain_bp = Blueprint('main', __name__)\n\n@main_bp.route('/')\ndef index():\n    return redirect(url_for('main.dashboard'))\n\n@main_bp.route('/dashboard')\n@login_required\ndef dashboard():\n    from sqlalchemy import func\n    \n    # Get statistics for dashboard\n    total_batteries = Battery.query.count()\n    pending_batteries = Battery.query.filter(Battery.status.in_(['Received', 'Pending'])).count()\n    ready_batteries = Battery.query.filter_by(status='Ready').count()\n    completed_batteries = Battery.query.filter(Battery.status.in_(['Delivered', 'Returned'])).count()\n    not_repairable_batteries = Battery.query.filter_by(status='Not Repairable').count()\n    \n    # Calculate revenue statistics including pickup charges from delivered batteries\n    delivered_service_revenue = db.session.query(func.sum(Battery.service_price)).filter(\n        Battery.status.in_(['Delivered', 'Returned'])\n    ).scalar() or 0\n    delivered_pickup_revenue = db.session.query(func.sum(Battery.pickup_charge)).filter(\n        Battery.status.in_(['Delivered', 'Returned']), Battery.is_pickup == True\n    ).scalar() or 0\n    total_revenue = delivered_service_revenue + delivered_pickup_revenue\n    avg_service_price = db.session.query(func.avg(Battery.service_price + Battery.pickup_charge)).filter(\n        Battery.status.in_(['Delivered', 'Returned'])\n    ).scalar() or 0\n    \n    # Recent batteries (only pending and ready - active work)\n    recent_batteries = Battery.query.filter(Battery.status.in_(['Pending', 'Ready'])).order_by(Battery.inward_date.desc()).limit(5).all()\n    \n    return render_template('dashboard.html', \n                         total_batteries=total_batteries,\n                         pending_batteries=pending_batteries,\n                         ready_batteries=ready_batteries,\n                         completed_batteries=completed_batteries,\n                         not_repairable_batteries=not_repairable_batteries,\n                         recent_batteries=recent_batteries,\n                         total_revenue=float(total_revenue),\n                         avg_service_price=float(avg_service_price))\n\n@main_bp.route('/battery/entry', methods=['GET', 'POST'])\n@login_required\ndef battery_entry():\n    if current_user.role not in ['shop_staff', 'admin']:\n        flash('Access denied. This feature is only available to shop staff and admin.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    if request.method == 'POST':\n        customer_name = request.form.get('customer_name')\n        mobile = request.form.get('mobile')\n        mobile_secondary = request.form.get('mobile_secondary')\n        battery_type = request.form.get('battery_type')\n        voltage = request.form.get('voltage')\n        capacity = request.form.get('capacity')\n        is_pickup = request.form.get('is_pickup') == '1'\n        pickup_charge = float(request.form.get('pickup_charge', 0) or 0)\n        \n        if not all([customer_name, mobile, battery_type, voltage, capacity]):\n            flash('All fields are required.', 'error')\n            return render_template('battery_entry.html')\n        \n        try:\n            # Check if customer exists or create new one\n            customer = Customer.query.filter_by(mobile=mobile).first()\n            if not customer:\n                customer = Customer()\n                customer.name = customer_name\n                customer.mobile = mobile\n                customer.mobile_secondary = mobile_secondary\n                db.session.add(customer)\n                db.session.flush()  # Get customer ID\n            \n            # Generate battery ID\n            battery_id = Battery.generate_next_battery_id()\n            \n            # Create battery record\n            battery = Battery()\n            battery.battery_id = battery_id\n            battery.customer_id = customer.id\n            battery.battery_type = battery_type\n            battery.voltage = voltage\n            battery.capacity = capacity\n            battery.status = 'Received'\n            battery.is_pickup = is_pickup\n            battery.pickup_charge = pickup_charge\n            db.session.add(battery)\n            db.session.flush()  # Get battery record ID\n            \n            # Add initial status history\n            status_history = BatteryStatusHistory()\n            status_history.battery_id = battery.id\n            status_history.status = 'Received'\n            status_history.comments = f'Battery received from customer{\" - Pickup service\" if is_pickup else \"\"}'\n            status_history.updated_by = current_user.id\n            db.session.add(status_history)\n            \n            db.session.commit()\n            flash(f'Battery {battery_id} has been successfully registered.', 'success')\n            return redirect(url_for('main.receipt', battery_id=battery.id))\n            \n        except Exception as e:\n            db.session.rollback()\n            flash(f'Error registering battery: {str(e)}', 'error')\n    \n    return render_template('battery_entry.html')\n\n@main_bp.route('/technician/panel', methods=['GET', 'POST'])\n@login_required\ndef technician_panel():\n    if current_user.role not in ['technician', 'shop_staff', 'admin']:\n        flash('Access denied.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    batteries = []\n    search_query = ''\n    \n    # Check if there's a search parameter from GET request (e.g., from dashboard links)\n    if request.method == 'GET' and request.args.get('search'):\n        search_query = request.args.get('search', '').strip()\n        if search_query:\n            batteries = Battery.query.join(Customer).filter(\n                db.and_(\n                    Battery.status.in_(['Received', 'Pending']),\n                    db.or_(\n                        Battery.battery_id.ilike(f'%{search_query}%'),\n                        Customer.mobile.ilike(f'%{search_query}%'),\n                        Customer.name.ilike(f'%{search_query}%')\n                    )\n                )\n            ).order_by(Battery.inward_date.asc()).all()\n            show_full_details = True\n        else:\n            batteries = Battery.query.filter(\n                Battery.status.in_(['Received', 'Pending'])\n            ).order_by(Battery.inward_date.asc()).all()\n            show_full_details = False\n    elif request.method == 'POST':\n        search_query = request.form.get('search_query', '').strip()\n        \n        if search_query:\n            # Search by battery ID, customer mobile, or customer name\n            batteries = Battery.query.join(Customer).filter(\n                db.and_(\n                    Battery.status.in_(['Received', 'Pending']),\n                    db.or_(\n                        Battery.battery_id.ilike(f'%{search_query}%'),\n                        Customer.mobile.ilike(f'%{search_query}%'),\n                        Customer.name.ilike(f'%{search_query}%')\n                    )\n                )\n            ).order_by(Battery.inward_date.asc()).all()\n            show_full_details = True\n        else:\n            # If no search query, show all pending batteries\n            batteries = Battery.query.filter(\n                Battery.status.in_(['Received', 'Pending'])\n            ).order_by(Battery.inward_date.asc()).all()\n            show_full_details = True\n    else:\n        # GET request - show only battery IDs (minimal view)\n        batteries = Battery.query.filter(\n            Battery.status.in_(['Received', 'Pending'])\n        ).order_by(Battery.inward_date.asc()).all()\n        show_full_details = False\n    \n    return render_template('technician_panel.html', batteries=batteries, search_query=search_query, show_full_details=show_full_details)\n\n@main_bp.route('/battery/update', methods=['POST'])\n@login_required\ndef update_battery_status():\n    if current_user.role not in ['technician', 'shop_staff', 'admin']:\n        flash('Access denied.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    battery_id = request.form.get('battery_id')\n    new_status = request.form.get('status')\n    comments = request.form.get('comments', '')\n    service_price = request.form.get('service_price', 0)\n    \n    try:\n        battery = Battery.query.get_or_404(battery_id)\n        battery.status = new_status\n        \n        if service_price:\n            battery.service_price = float(service_price)\n        \n        # Add status history\n        status_history = BatteryStatusHistory()\n        status_history.battery_id = battery.id\n        status_history.status = new_status\n        status_history.comments = comments\n        status_history.updated_by = current_user.id\n        db.session.add(status_history)\n        db.session.commit()\n        \n        flash(f'Battery {battery.battery_id} status updated to {new_status}.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error updating battery status: {str(e)}', 'error')\n    \n    return redirect(url_for('main.technician_panel'))\n\n@main_bp.route('/search', methods=['GET', 'POST'])\n@login_required\ndef search():\n    results = []\n    search_query = ''\n    \n    if request.method == 'POST':\n        search_query = request.form.get('search_query', '').strip()\n        \n        if search_query:\n            # Search by battery ID or customer mobile\n            batteries = Battery.query.join(Customer).filter(\n                db.or_(\n                    Battery.battery_id.ilike(f'%{search_query}%'),\n                    Customer.mobile.ilike(f'%{search_query}%'),\n                    Customer.name.ilike(f'%{search_query}%')\n                )\n            ).all()\n            results = batteries\n    \n    return render_template('search.html', results=results, search_query=search_query)\n\n@main_bp.route('/receipt/<int:battery_id>')\n@login_required\ndef receipt(battery_id):\n    battery = Battery.query.get_or_404(battery_id)\n    \n    def get_shop_name():\n        return SystemSettings.get_setting('shop_name', 'Battery Repair Service')\n    \n    return render_template('receipt.html', battery=battery, get_shop_name=get_shop_name)\n\n@main_bp.route('/bill/<int:battery_id>')\n@login_required\ndef bill(battery_id):\n    battery = Battery.query.get_or_404(battery_id)\n    if battery.status not in ['Ready', 'Delivered', 'Returned'] or (battery.service_price <= 0 and battery.pickup_charge <= 0):\n        flash('Bill can only be generated for completed repairs with service charges.', 'error')\n        return redirect(url_for('main.search'))\n    \n    def get_shop_name():\n        return SystemSettings.get_setting('shop_name', 'Battery Repair Service')\n    \n    return render_template('bill.html', battery=battery, get_shop_name=get_shop_name)\n\n@main_bp.route('/export/csv')\n@login_required\ndef export_csv():\n    try:\n        batteries = Battery.query.join(Customer).all()\n        \n        output = io.StringIO()\n        writer = csv.writer(output)\n        \n        # Write header\n        writer.writerow([\n            'Battery ID', 'Customer Name', 'Mobile', 'Battery Type', \n            'Voltage', 'Capacity', 'Status', 'Inward Date', \n            'Service Price', 'Last Updated'\n        ])\n        \n        # Write data\n        for battery in batteries:\n            last_update = battery.status_history[-1].updated_at if battery.status_history else battery.inward_date\n            writer.writerow([\n                battery.battery_id,\n                battery.customer.name,\n                battery.customer.mobile,\n                battery.battery_type,\n                battery.voltage,\n                battery.capacity,\n                battery.status,\n                battery.inward_date.strftime('%Y-%m-%d %H:%M'),\n                battery.service_price,\n                last_update.strftime('%Y-%m-%d %H:%M')\n            ])\n        \n        output.seek(0)\n        \n        response = make_response(output.getvalue())\n        response.headers['Content-Disposition'] = f'attachment; filename=battery_records_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.csv'\n        response.headers['Content-type'] = 'text/csv'\n        \n        return response\n        \n    except Exception as e:\n        flash(f'Error exporting data: {str(e)}', 'error')\n        return redirect(url_for('main.dashboard'))\n\n@main_bp.route('/battery/<int:battery_id>/details')\n@login_required\ndef battery_details(battery_id):\n    battery = Battery.query.get_or_404(battery_id)\n    notes = BatteryStaffNote.query.filter_by(battery_id=battery.id).order_by(BatteryStaffNote.created_at.desc()).all()\n    return render_template('battery_details.html', battery=battery, notes=notes)\n\n@main_bp.route('/battery/<int:battery_id>/add_note', methods=['POST'])\n@login_required\ndef add_staff_note(battery_id):\n    if current_user.role not in ['shop_staff', 'admin']:\n        flash('Access denied. Only staff and admin can add notes.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    battery = Battery.query.get_or_404(battery_id)\n    note_text = request.form.get('note')\n    note_type = request.form.get('note_type', 'followup')\n    \n    if not note_text:\n        flash('Note cannot be empty.', 'error')\n        return redirect(url_for('main.battery_details', battery_id=battery_id))\n    \n    try:\n        note = BatteryStaffNote()\n        note.battery_id = battery.id\n        note.note = note_text\n        note.note_type = note_type\n        note.created_by = current_user.id\n        db.session.add(note)\n        db.session.commit()\n        flash('Note added successfully.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error adding note: {str(e)}', 'error')\n    \n    return redirect(url_for('main.battery_details', battery_id=battery_id))\n\n@main_bp.route('/battery/<int:battery_id>/mark_delivered', methods=['POST'])\n@login_required\ndef mark_battery_delivered(battery_id):\n    if current_user.role not in ['shop_staff', 'admin']:\n        flash('Access denied. Only staff and admin can mark batteries as delivered.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    battery = Battery.query.get_or_404(battery_id)\n    \n    if battery.status != 'Ready':\n        flash('Only batteries with Ready status can be marked as delivered.', 'error')\n        return redirect(url_for('main.search'))\n    \n    delivery_type = request.form.get('delivery_type', 'delivered')  # delivered or returned\n    comments = request.form.get('comments', '')\n    \n    try:\n        battery.status = 'Delivered' if delivery_type == 'delivered' else 'Returned'\n        \n        # Add status history\n        status_history = BatteryStatusHistory()\n        status_history.battery_id = battery.id\n        status_history.status = battery.status\n        status_history.comments = comments\n        status_history.updated_by = current_user.id\n        db.session.add(status_history)\n        db.session.commit()\n        \n        flash(f'Battery {battery.battery_id} marked as {battery.status.lower()}.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error updating battery status: {str(e)}', 'error')\n    \n    return redirect(url_for('main.search'))\n\n@main_bp.route('/delivered_batteries')\n@login_required\ndef delivered_batteries():\n    if current_user.role not in ['shop_staff', 'admin']:\n        flash('Access denied. Only staff and admin can view delivered batteries.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    # Get all delivered and returned batteries (excluding not repairable)\n    batteries = Battery.query.filter(Battery.status.in_(['Delivered', 'Returned'])).order_by(Battery.inward_date.desc()).all()\n    \n    return render_template('delivered_batteries.html', batteries=batteries)\n\n@main_bp.route('/not_repairable_batteries')\n@login_required\ndef not_repairable_batteries():\n    if current_user.role not in ['shop_staff', 'admin']:\n        flash('Access denied. Only staff and admin can view not repairable batteries.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    # Get all not repairable batteries\n    batteries = Battery.query.filter_by(status='Not Repairable').order_by(Battery.inward_date.desc()).all()\n    \n    return render_template('not_repairable_batteries.html', batteries=batteries)\n\n@main_bp.route('/battery/<int:battery_id>/quick_note', methods=['POST'])\n@login_required\ndef add_quick_note(battery_id):\n    if current_user.role not in ['shop_staff', 'admin']:\n        flash('Access denied. Only staff and admin can add notes.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    battery = Battery.query.get_or_404(battery_id)\n    note_text = request.form.get('note')\n    \n    if not note_text:\n        flash('Note cannot be empty.', 'error')\n        return redirect(request.referrer or url_for('main.dashboard'))\n    \n    try:\n        note = BatteryStaffNote()\n        note.battery_id = battery.id\n        note.note = note_text\n        note.note_type = 'followup'\n        note.created_by = current_user.id\n        db.session.add(note)\n        db.session.commit()\n        flash('Note added successfully.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error adding note: {str(e)}', 'error')\n    \n    return redirect(request.referrer or url_for('main.dashboard'))\n\n@main_bp.route('/battery/<int:battery_id>/reopen_for_warranty', methods=['POST'])\n@login_required\ndef reopen_for_warranty(battery_id):\n    if current_user.role not in ['shop_staff', 'admin']:\n        flash('Access denied. Only staff and admin can reopen batteries for warranty.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    battery = Battery.query.get_or_404(battery_id)\n    \n    # Only allow reopening if battery was Ready/Delivered/Returned\n    if battery.status not in ['Ready', 'Delivered', 'Returned']:\n        flash('Only completed batteries can be reopened for warranty.', 'error')\n        return redirect(request.referrer or url_for('main.dashboard'))\n    \n    warranty_reason = request.form.get('warranty_reason')\n    \n    if not warranty_reason:\n        flash('Warranty reason is required.', 'error')\n        return redirect(request.referrer or url_for('main.dashboard'))\n    \n    try:\n        # Change status back to Pending for re-work\n        old_status = battery.status\n        battery.status = 'Pending'\n        db.session.add(battery)\n        \n        # Add status history\n        status_history = BatteryStatusHistory()\n        status_history.battery_id = battery.id\n        status_history.status = 'Pending'\n        status_history.comments = f'Reopened for warranty - Previous status: {old_status}. Reason: {warranty_reason}'\n        status_history.updated_by = current_user.id\n        db.session.add(status_history)\n        \n        # Add a warranty note\n        warranty_note = BatteryStaffNote()\n        warranty_note.battery_id = battery.id\n        warranty_note.note = f'WARRANTY RETURN: {warranty_reason}'\n        warranty_note.note_type = 'issue'\n        warranty_note.created_by = current_user.id\n        db.session.add(warranty_note)\n        \n        db.session.commit()\n        flash(f'Battery {battery.battery_id} reopened for warranty work.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error reopening battery: {str(e)}', 'error')\n    \n    return redirect(request.referrer or url_for('main.dashboard'))\n\n@main_bp.route('/all_batteries')\n@login_required\ndef all_batteries():\n    if current_user.role not in ['shop_staff', 'admin']:\n        flash('Access denied. Only staff and admin can view all batteries.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    # Get all batteries with pagination\n    page = request.args.get('page', 1, type=int)\n    status_filter = request.args.get('status', '')\n    \n    query = Battery.query.join(Customer)\n    \n    if status_filter:\n        query = query.filter(Battery.status == status_filter)\n    \n    batteries = query.order_by(Battery.inward_date.desc()).paginate(\n        page=page, per_page=20, error_out=False\n    )\n    \n    # Get all unique statuses for filter dropdown\n    all_statuses = db.session.query(Battery.status).distinct().all()\n    statuses = [status[0] for status in all_statuses]\n    \n    return render_template('all_batteries.html', \n                         batteries=batteries, \n                         statuses=statuses, \n                         current_status=status_filter)\n\n@main_bp.route('/all_bills')\n@login_required\ndef all_bills():\n    if current_user.role not in ['shop_staff', 'admin']:\n        flash('Access denied. Only staff and admin can view all bills.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    # Get all batteries that have bills (service_price > 0)\n    page = request.args.get('page', 1, type=int)\n    status_filter = request.args.get('status', '')\n    \n    query = Battery.query.join(Customer).filter(Battery.service_price > 0)\n    \n    if status_filter:\n        query = query.filter(Battery.status == status_filter)\n    \n    batteries = query.order_by(Battery.inward_date.desc()).paginate(\n        page=page, per_page=20, error_out=False\n    )\n    \n    # Get all unique statuses for filter dropdown\n    all_statuses = db.session.query(Battery.status).filter(Battery.service_price > 0).distinct().all()\n    statuses = [status[0] for status in all_statuses]\n    \n    # Calculate total revenue\n    total_service_revenue = db.session.query(func.sum(Battery.service_price)).filter(Battery.service_price > 0).scalar() or 0\n    total_pickup_revenue = db.session.query(func.sum(Battery.pickup_charge)).filter(\n        Battery.is_pickup == True\n    ).scalar() or 0\n    total_revenue = total_service_revenue + total_pickup_revenue\n    \n    return render_template('all_bills.html', \n                         batteries=batteries, \n                         statuses=statuses, \n                         current_status=status_filter,\n                         total_revenue=total_revenue)\n\n# Admin routes\n@main_bp.route('/admin/users')\n@login_required\ndef admin_users():\n    if current_user.role != 'admin':\n        flash('Access denied. Admin access required.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    users = User.query.all()\n    return render_template('admin/users.html', users=users)\n\n@main_bp.route('/admin/users/add', methods=['GET', 'POST'])\n@login_required\ndef admin_add_user():\n    if current_user.role != 'admin':\n        flash('Access denied. Admin access required.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    if request.method == 'POST':\n        username = request.form.get('username')\n        full_name = request.form.get('full_name')\n        role = request.form.get('role')\n        password = request.form.get('password')\n        \n        if not all([username, full_name, role, password]):\n            flash('All fields are required.', 'error')\n            return render_template('admin/add_user.html')\n        \n        if User.query.filter_by(username=username).first():\n            flash('Username already exists.', 'error')\n            return render_template('admin/add_user.html')\n        \n        try:\n            user = User()\n            user.username = username\n            user.full_name = full_name\n            user.role = role\n            if password:\n                user.password_hash = generate_password_hash(password)\n            db.session.add(user)\n            db.session.commit()\n            flash(f'User {username} created successfully.', 'success')\n            return redirect(url_for('main.admin_users'))\n        except Exception as e:\n            db.session.rollback()\n            flash(f'Error creating user: {str(e)}', 'error')\n    \n    return render_template('admin/add_user.html')\n\n@main_bp.route('/admin/users/<int:user_id>/toggle', methods=['POST'])\n@login_required\ndef admin_toggle_user(user_id):\n    if current_user.role != 'admin':\n        flash('Access denied.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    user = User.query.get_or_404(user_id)\n    if user.id == current_user.id:\n        flash('Cannot deactivate your own account.', 'error')\n        return redirect(url_for('main.admin_users'))\n    \n    user.active = not user.active\n    try:\n        db.session.commit()\n        status = 'activated' if user.active else 'deactivated'\n        flash(f'User {user.username} has been {status}.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error updating user: {str(e)}', 'error')\n    \n    return redirect(url_for('main.admin_users'))\n\n@main_bp.route('/admin/settings', methods=['GET', 'POST'])\n@login_required\ndef admin_settings():\n    if current_user.role != 'admin':\n        flash('Access denied. Admin access required.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    if request.method == 'POST':\n        shop_name = request.form.get('shop_name')\n        battery_prefix = request.form.get('battery_id_prefix')\n        battery_start = request.form.get('battery_id_start')\n        battery_padding = request.form.get('battery_id_padding')\n        \n        try:\n            SystemSettings.set_setting('shop_name', shop_name)\n            SystemSettings.set_setting('battery_id_prefix', battery_prefix)\n            SystemSettings.set_setting('battery_id_start', battery_start)\n            SystemSettings.set_setting('battery_id_padding', battery_padding)\n            db.session.commit()\n            flash('Settings updated successfully.', 'success')\n        except Exception as e:\n            db.session.rollback()\n            flash(f'Error updating settings: {str(e)}', 'error')\n    \n    settings = {\n        'shop_name': SystemSettings.get_setting('shop_name', 'Battery Repair Service'),\n        'battery_id_prefix': SystemSettings.get_setting('battery_id_prefix', 'BAT'),\n        'battery_id_start': SystemSettings.get_setting('battery_id_start', '1'),\n        'battery_id_padding': SystemSettings.get_setting('battery_id_padding', '4')\n    }\n    \n    return render_template('admin/settings.html', settings=settings)\n\n@main_bp.route('/admin/backup')\n@login_required\ndef admin_backup():\n    if current_user.role not in ['admin', 'shop_staff']:\n        flash('Access denied. Admin or staff access required.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    try:\n        # Create comprehensive backup data\n        backup_data = {\n            'timestamp': datetime.now().isoformat(),\n            'users': [],\n            'customers': [],\n            'batteries': [],\n            'status_history': [],\n            'settings': []\n        }\n        \n        # Export users (without passwords for security)\n        for user in User.query.all():\n            backup_data['users'].append({\n                'username': user.username,\n                'full_name': user.full_name,\n                'role': user.role,\n                'created_at': user.created_at.isoformat() if user.created_at else None,\n                'is_active': user.is_active\n            })\n        \n        # Export customers\n        for customer in Customer.query.all():\n            backup_data['customers'].append({\n                'id': customer.id,\n                'name': customer.name,\n                'mobile': customer.mobile,\n                'created_at': customer.created_at.isoformat() if customer.created_at else None\n            })\n        \n        # Export batteries\n        for battery in Battery.query.all():\n            backup_data['batteries'].append({\n                'id': battery.id,\n                'battery_id': battery.battery_id,\n                'customer_id': battery.customer_id,\n                'battery_type': battery.battery_type,\n                'voltage': battery.voltage,\n                'capacity': battery.capacity,\n                'status': battery.status,\n                'inward_date': battery.inward_date.isoformat() if battery.inward_date else None,\n                'service_price': battery.service_price\n            })\n        \n        # Export status history\n        for history in BatteryStatusHistory.query.all():\n            backup_data['status_history'].append({\n                'id': history.id,\n                'battery_id': history.battery_id,\n                'status': history.status,\n                'comments': history.comments,\n                'updated_by': history.updated_by,\n                'updated_at': history.updated_at.isoformat() if history.updated_at else None\n            })\n        \n        # Export settings\n        for setting in SystemSettings.query.all():\n            backup_data['settings'].append({\n                'setting_key': setting.setting_key,\n                'setting_value': setting.setting_value,\n                'updated_at': setting.updated_at.isoformat() if setting.updated_at else None\n            })\n        \n        # Create JSON response\n        backup_json = json.dumps(backup_data, indent=2)\n        \n        response = make_response(backup_json)\n        response.headers['Content-Disposition'] = f'attachment; filename=battery_erp_backup_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.json'\n        response.headers['Content-Type'] = 'application/json'\n        \n        return response\n        \n    except Exception as e:\n        flash(f'Error creating backup: {str(e)}', 'error')\n        return redirect(url_for('main.dashboard'))\n\n@main_bp.route('/admin/restore', methods=['GET', 'POST'])\n@login_required\ndef admin_restore():\n    if current_user.role != 'admin':\n        flash('Access denied. Admin access required.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    if request.method == 'POST':\n        if 'backup_file' not in request.files:\n            flash('No file selected.', 'error')\n            return render_template('admin/restore.html')\n        \n        file = request.files['backup_file']\n        if file.filename == '':\n            flash('No file selected.', 'error')\n            return render_template('admin/restore.html')\n        \n        if file and file.filename and file.filename.endswith('.json'):\n            try:\n                backup_data = json.loads(file.read().decode('utf-8'))\n                \n                # Clear existing data (be careful!)\n                confirm = request.form.get('confirm_restore')\n                if confirm != 'CONFIRM':\n                    flash('Please type \"CONFIRM\" to proceed with restore.', 'error')\n                    return render_template('admin/restore.html')\n                \n                # Implement actual restore functionality\n                try:\n                    # Backup current admin user before clearing data\n                    admin_user_backup = {\n                        'username': current_user.username,\n                        'password_hash': current_user.password_hash,\n                        'role': current_user.role,\n                        'full_name': current_user.full_name\n                    }\n                    \n                    # Clear existing data (preserve current admin)\n                    BatteryStatusHistory.query.delete()\n                    Battery.query.delete()\n                    Customer.query.delete()\n                    SystemSettings.query.delete()\n                    # Don't delete current admin user\n                    User.query.filter(User.id != current_user.id).delete()\n                    \n                    db.session.commit()\n                    \n                    # Restore customers\n                    customer_id_mapping = {}\n                    for customer_data in backup_data.get('customers', []):\n                        customer = Customer()\n                        customer.name = customer_data['name']\n                        customer.mobile = customer_data['mobile']\n                        if customer_data.get('created_at'):\n                            customer.created_at = datetime.fromisoformat(customer_data['created_at'])\n                        db.session.add(customer)\n                        db.session.flush()\n                        customer_id_mapping[customer_data['id']] = customer.id\n                    \n                    # Restore batteries\n                    battery_id_mapping = {}\n                    for battery_data in backup_data.get('batteries', []):\n                        battery = Battery()\n                        battery.battery_id = battery_data['battery_id']\n                        battery.customer_id = customer_id_mapping.get(battery_data['customer_id'])\n                        battery.battery_type = battery_data['battery_type']\n                        battery.voltage = battery_data['voltage']\n                        battery.capacity = battery_data['capacity']\n                        battery.status = battery_data['status']\n                        battery.service_price = battery_data.get('service_price', 0.0)\n                        if battery_data.get('inward_date'):\n                            battery.inward_date = datetime.fromisoformat(battery_data['inward_date'])\n                        db.session.add(battery)\n                        db.session.flush()\n                        battery_id_mapping[battery_data['id']] = battery.id\n                    \n                    # Restore users (except passwords)\n                    for user_data in backup_data.get('users', []):\n                        if user_data['username'] != current_user.username:  # Don't overwrite current admin\n                            user = User()\n                            user.username = user_data['username']\n                            user.full_name = user_data['full_name']\n                            user.role = user_data['role']\n                            user.password_hash = generate_password_hash('password123')\n                            user.active = user_data.get('is_active', True)\n                            if user_data.get('created_at'):\n                                user.created_at = datetime.fromisoformat(user_data['created_at'])\n                            db.session.add(user)\n                    \n                    # Restore status history\n                    for history_data in backup_data.get('status_history', []):\n                        if battery_id_mapping.get(history_data['battery_id']):\n                            history = BatteryStatusHistory()\n                            history.battery_id = battery_id_mapping[history_data['battery_id']]\n                            history.status = history_data['status']\n                            history.comments = history_data.get('comments', '')\n                            history.updated_by = current_user.id  # Assign to current admin\n                            if history_data.get('updated_at'):\n                                history.updated_at = datetime.fromisoformat(history_data['updated_at'])\n                            db.session.add(history)\n                    \n                    # Restore system settings\n                    for setting_data in backup_data.get('settings', []):\n                        setting = SystemSettings()\n                        setting.setting_key = setting_data['setting_key']\n                        setting.setting_value = setting_data['setting_value']\n                        if setting_data.get('updated_at'):\n                            setting.updated_at = datetime.fromisoformat(setting_data['updated_at'])\n                        db.session.add(setting)\n                    \n                    db.session.commit()\n                    flash('Data restored successfully! Note: Restored user passwords have been reset to \"password123\".', 'success')\n                    return redirect(url_for('main.dashboard'))\n                    \n                except Exception as restore_error:\n                    db.session.rollback()\n                    flash(f'Error during restore: {str(restore_error)}', 'error')\n                \n            except Exception as e:\n                flash(f'Error reading backup file: {str(e)}', 'error')\n        else:\n            flash('Please upload a valid JSON backup file.', 'error')\n    \n    return render_template('admin/restore.html')\n\n@main_bp.route('/staff/backup')\n@login_required\ndef staff_backup():\n    if current_user.role not in ['shop_staff', 'admin']:\n        flash('Access denied.', 'error')\n        return redirect(url_for('main.dashboard'))\n    \n    return redirect(url_for('main.admin_backup'))\n\n@main_bp.route('/finished_batteries')\n@login_required\ndef finished_batteries():\n    finished = Battery.query.filter_by(status='Ready').order_by(Battery.inward_date.desc()).all()\n    return render_template('finished_batteries.html', batteries=finished)\n\n@main_bp.route('/reports/monthly')\n@login_required\ndef monthly_report():\n    from sqlalchemy import func, extract\n    \n    # Get current month data\n    current_month = datetime.now().month\n    current_year = datetime.now().year\n    \n    monthly_batteries = Battery.query.filter(\n        extract('month', Battery.inward_date) == current_month,\n        extract('year', Battery.inward_date) == current_year\n    ).all()\n    \n    monthly_completed = Battery.query.filter(\n        Battery.status.in_(['Delivered', 'Returned']),\n        extract('month', Battery.inward_date) == current_month,\n        extract('year', Battery.inward_date) == current_year\n    ).count()\n    \n    # Calculate revenue from delivered/returned batteries including pickup charges\n    monthly_service_revenue = db.session.query(func.sum(Battery.service_price)).filter(\n        Battery.status.in_(['Delivered', 'Returned']),\n        extract('month', Battery.inward_date) == current_month,\n        extract('year', Battery.inward_date) == current_year\n    ).scalar() or 0\n    \n    monthly_pickup_revenue = db.session.query(func.sum(Battery.pickup_charge)).filter(\n        Battery.status.in_(['Delivered', 'Returned']),\n        Battery.is_pickup == True,\n        extract('month', Battery.inward_date) == current_month,\n        extract('year', Battery.inward_date) == current_year\n    ).scalar() or 0\n    \n    monthly_revenue = monthly_service_revenue + monthly_pickup_revenue\n    \n    return render_template('reports/monthly.html', \n                         batteries=monthly_batteries,\n                         completed_count=monthly_completed,\n                         total_revenue=float(monthly_revenue),\n                         month_name=datetime.now().strftime('%B %Y'))\n\n@main_bp.route('/reports/yearly')\n@login_required\ndef yearly_report():\n    from sqlalchemy import func, extract\n    \n    # Get current year data\n    current_year = datetime.now().year\n    \n    yearly_batteries = Battery.query.filter(\n        extract('year', Battery.inward_date) == current_year\n    ).all()\n    \n    yearly_completed = Battery.query.filter(\n        Battery.status.in_(['Delivered', 'Returned']),\n        extract('year', Battery.inward_date) == current_year\n    ).count()\n    \n    # Calculate yearly revenue from delivered/returned batteries including pickup charges\n    yearly_service_revenue = db.session.query(func.sum(Battery.service_price)).filter(\n        Battery.status.in_(['Delivered', 'Returned']),\n        extract('year', Battery.inward_date) == current_year\n    ).scalar() or 0\n    \n    yearly_pickup_revenue = db.session.query(func.sum(Battery.pickup_charge)).filter(\n        Battery.status.in_(['Delivered', 'Returned']),\n        Battery.is_pickup == True,\n        extract('year', Battery.inward_date) == current_year\n    ).scalar() or 0\n    \n    yearly_revenue = yearly_service_revenue + yearly_pickup_revenue\n    \n    # Get monthly breakdown\n    monthly_breakdown = []\n    for month in range(1, 13):\n        # Calculate monthly revenue from delivered/returned batteries including pickup charges\n        month_service_revenue = db.session.query(func.sum(Battery.service_price)).filter(\n            Battery.status.in_(['Delivered', 'Returned']),\n            extract('month', Battery.inward_date) == month,\n            extract('year', Battery.inward_date) == current_year\n        ).scalar() or 0\n        \n        month_pickup_revenue = db.session.query(func.sum(Battery.pickup_charge)).filter(\n            Battery.status.in_(['Delivered', 'Returned']),\n            Battery.is_pickup == True,\n            extract('month', Battery.inward_date) == month,\n            extract('year', Battery.inward_date) == current_year\n        ).scalar() or 0\n        \n        month_revenue = month_service_revenue + month_pickup_revenue\n        \n        month_count = Battery.query.filter(\n            Battery.status.in_(['Delivered', 'Returned']),\n            extract('month', Battery.inward_date) == month,\n            extract('year', Battery.inward_date) == current_year\n        ).count()\n        \n        monthly_breakdown.append({\n            'month': datetime(current_year, month, 1).strftime('%B'),\n            'revenue': float(month_revenue),\n            'count': month_count\n        })\n    \n    return render_template('reports/yearly.html', \n                         batteries=yearly_batteries,\n                         completed_count=yearly_completed,\n                         total_revenue=float(yearly_revenue),\n                         year=current_year,\n                         monthly_breakdown=monthly_breakdown)\n","size_bytes":41756},"run-docker.sh":{"content":"#!/bin/bash\n\n# Battery Repair ERP - Docker Startup Script\n# Just run this script - no configuration needed!\n\necho \"🔋 Battery Repair ERP - Starting Docker Setup...\"\n\n# Check if Docker is running\nif ! docker info > /dev/null 2>&1; then\n    echo \"❌ Docker is not running. Please start Docker first.\"\n    exit 1\nfi\n\n# Check if Docker Compose is available\nif ! command -v docker-compose > /dev/null 2>&1; then\n    echo \"❌ Docker Compose not found. Please install Docker Compose.\"\n    exit 1\nfi\n\necho \"✅ Docker is ready\"\n\n# Stop any existing containers\necho \"🛑 Stopping any existing containers...\"\ndocker-compose down\n\n# Build and start the application\necho \"🏗️  Building and starting Battery Repair ERP...\"\ndocker-compose up -d --build\n\n# Wait for services to be ready\necho \"⏳ Waiting for services to start...\"\nsleep 10\n\n# Check if services are running\nif docker-compose ps | grep -q \"Up\"; then\n    echo \"✅ Battery Repair ERP is now running!\"\n    echo \"\"\n    echo \"🌐 Access your application at: http://localhost:5000\"\n    echo \"\"\n    echo \"👤 Default Login Credentials:\"\n    echo \"   Admin:      username: admin      password: admin123\"\n    echo \"   Staff:      username: staff      password: staff123\"\n    echo \"   Technician: username: technician password: tech123\"\n    echo \"\"\n    echo \"📝 Useful Commands:\"\n    echo \"   View logs:    docker-compose logs -f web\"\n    echo \"   Stop app:     docker-compose down\"\n    echo \"   Restart app:  docker-compose restart\"\n    echo \"\"\n    echo \"🎉 Setup complete! Your Battery Repair ERP is ready to use.\"\nelse\n    echo \"❌ Something went wrong. Check the logs:\"\n    echo \"   docker-compose logs\"\nfi","size_bytes":1667},"static/offline-styles.css":{"content":"/* Offline-compatible Bootstrap-like styles for Docker container */\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #212529;\n    background-color: #f8f9fa;\n}\n\n.container {\n    width: 100%;\n    padding-right: 0.75rem;\n    padding-left: 0.75rem;\n    margin-right: auto;\n    margin-left: auto;\n    max-width: 1140px;\n}\n\n.row {\n    display: flex;\n    flex-wrap: wrap;\n    margin-right: -0.75rem;\n    margin-left: -0.75rem;\n}\n\n.col-md-6 {\n    flex: 0 0 50%;\n    max-width: 50%;\n    padding-right: 0.75rem;\n    padding-left: 0.75rem;\n}\n\n.col-md-8 {\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n    padding-right: 0.75rem;\n    padding-left: 0.75rem;\n}\n\n.col-md-4 {\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n    padding-right: 0.75rem;\n    padding-left: 0.75rem;\n}\n\n@media (max-width: 767.98px) {\n    .col-md-6, .col-md-8, .col-md-4 {\n        flex: 0 0 100%;\n        max-width: 100%;\n    }\n}\n\n.justify-content-center {\n    justify-content: center !important;\n}\n\n.text-center {\n    text-align: center !important;\n}\n\n.text-end {\n    text-align: right !important;\n}\n\n.mb-1 { margin-bottom: 0.25rem !important; }\n.mb-2 { margin-bottom: 0.5rem !important; }\n.mb-3 { margin-bottom: 1rem !important; }\n.mb-4 { margin-bottom: 1.5rem !important; }\n.me-1 { margin-right: 0.25rem !important; }\n.me-2 { margin-right: 0.5rem !important; }\n.mt-2 { margin-top: 0.5rem !important; }\n.mt-3 { margin-top: 1rem !important; }\n\n.card {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    min-width: 0;\n    word-wrap: break-word;\n    background-color: #fff;\n    background-clip: border-box;\n    border: 1px solid rgba(0, 0, 0, 0.125);\n    border-radius: 0.375rem;\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n}\n\n.card-header {\n    padding: 0.75rem 1.25rem;\n    margin-bottom: 0;\n    background-color: rgba(0, 0, 0, 0.03);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.125);\n    border-top-left-radius: calc(0.375rem - 1px);\n    border-top-right-radius: calc(0.375rem - 1px);\n}\n\n.card-body {\n    flex: 1 1 auto;\n    padding: 1.25rem;\n}\n\n.card-footer {\n    padding: 0.75rem 1.25rem;\n    background-color: rgba(0, 0, 0, 0.03);\n    border-top: 1px solid rgba(0, 0, 0, 0.125);\n    border-bottom-right-radius: calc(0.375rem - 1px);\n    border-bottom-left-radius: calc(0.375rem - 1px);\n}\n\n.navbar {\n    position: relative;\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n    padding-right: 1rem;\n    padding-left: 1rem;\n}\n\n.navbar-dark {\n    background-color: #343a40 !important;\n    color: #fff;\n}\n\n.navbar-brand {\n    padding-top: 0.3125rem;\n    padding-bottom: 0.3125rem;\n    margin-right: 1rem;\n    font-size: 1.25rem;\n    text-decoration: none;\n    white-space: nowrap;\n    color: #fff;\n    font-weight: bold;\n}\n\n.nav-link {\n    display: block;\n    padding: 0.5rem 1rem;\n    color: rgba(255, 255, 255, 0.75);\n    text-decoration: none;\n    transition: color 0.15s ease-in-out;\n}\n\n.nav-link:hover {\n    color: rgba(255, 255, 255, 1);\n}\n\n.btn {\n    display: inline-block;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #212529;\n    text-align: center;\n    text-decoration: none;\n    vertical-align: middle;\n    cursor: pointer;\n    border: 1px solid transparent;\n    padding: 0.375rem 0.75rem;\n    font-size: 1rem;\n    border-radius: 0.375rem;\n    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.btn-primary {\n    color: #fff;\n    background-color: #0d6efd;\n    border-color: #0d6efd;\n}\n\n.btn-primary:hover {\n    color: #fff;\n    background-color: #0b5ed7;\n    border-color: #0a58ca;\n}\n\n.btn-secondary {\n    color: #fff;\n    background-color: #6c757d;\n    border-color: #6c757d;\n}\n\n.btn-success {\n    color: #fff;\n    background-color: #198754;\n    border-color: #198754;\n}\n\n.btn-warning {\n    color: #000;\n    background-color: #ffc107;\n    border-color: #ffc107;\n}\n\n.btn-sm {\n    padding: 0.25rem 0.5rem;\n    font-size: 0.875rem;\n    border-radius: 0.25rem;\n}\n\n.table {\n    width: 100%;\n    margin-bottom: 1rem;\n    color: #212529;\n    border-collapse: collapse;\n}\n\n.table td, .table th {\n    padding: 0.75rem;\n    border-top: 1px solid #dee2e6;\n}\n\n.table-sm td, .table-sm th {\n    padding: 0.3rem;\n}\n\n.table-borderless td, .table-borderless th {\n    border: 0;\n}\n\n.badge {\n    display: inline-block;\n    padding: 0.35em 0.65em;\n    font-size: 0.75em;\n    font-weight: 700;\n    line-height: 1;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: baseline;\n    border-radius: 0.375rem;\n}\n\n.bg-primary { background-color: #0d6efd !important; color: #fff; }\n.bg-secondary { background-color: #6c757d !important; color: #fff; }\n.bg-success { background-color: #198754 !important; color: #fff; }\n.bg-warning { background-color: #ffc107 !important; color: #000; }\n.bg-danger { background-color: #dc3545 !important; color: #fff; }\n.bg-info { background-color: #0dcaf0 !important; color: #000; }\n\n.alert {\n    position: relative;\n    padding: 0.75rem 1.25rem;\n    margin-bottom: 1rem;\n    border: 1px solid transparent;\n    border-radius: 0.375rem;\n}\n\n.alert-info {\n    color: #055160;\n    background-color: #d1ecf1;\n    border-color: #bee5eb;\n}\n\n.alert-success {\n    color: #0f5132;\n    background-color: #d1e7dd;\n    border-color: #badbcc;\n}\n\n.small {\n    font-size: 0.875em;\n}\n\n.text-muted {\n    color: #6c757d !important;\n}\n\n.form-control {\n    display: block;\n    width: 100%;\n    padding: 0.375rem 0.75rem;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #212529;\n    background-color: #fff;\n    background-image: none;\n    border: 1px solid #ced4da;\n    border-radius: 0.375rem;\n    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.form-control:focus {\n    color: #212529;\n    background-color: #fff;\n    border-color: #86b7fe;\n    outline: 0;\n    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);\n}\n\n.form-label {\n    margin-bottom: 0.5rem;\n    font-weight: 500;\n}\n\n.form-select {\n    display: block;\n    width: 100%;\n    padding: 0.375rem 2.25rem 0.375rem 0.75rem;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5;\n    color: #212529;\n    background-color: #fff;\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e\");\n    background-repeat: no-repeat;\n    background-position: right 0.75rem center;\n    background-size: 16px 12px;\n    border: 1px solid #ced4da;\n    border-radius: 0.375rem;\n}\n\nhr {\n    margin: 1rem 0;\n    color: inherit;\n    background-color: currentColor;\n    border: 0;\n    opacity: 0.25;\n    height: 1px;\n}\n\nul {\n    padding-left: 2rem;\n}\n\n/* QR Code Sticker Styles */\n.qr-sticker {\n    width: 2in;\n    height: 1.5in;\n    border: 1px solid #000;\n    padding: 0.1in;\n    background: #fff;\n    color: #000;\n    font-family: Arial, sans-serif;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    page-break-inside: avoid;\n}\n\n.qr-sticker .qr-code {\n    width: 1in;\n    height: 1in;\n    margin-bottom: 0.05in;\n}\n\n.qr-sticker .battery-id {\n    font-size: 10pt;\n    font-weight: bold;\n    margin: 0;\n}\n\n.qr-sticker .shop-name {\n    font-size: 6pt;\n    margin: 0;\n    color: #666;\n}\n\n/* Print specific styles */\n@media print {\n    .no-print {\n        display: none !important;\n    }\n    \n    .print-only {\n        display: block !important;\n    }\n    \n    .qr-sticker-print {\n        width: 2in;\n        height: 1.5in;\n        margin: 0.1in;\n        border: 1px solid #000;\n        display: inline-block;\n        vertical-align: top;\n    }\n    \n    body {\n        background: white;\n        color: black;\n    }\n    \n    .card {\n        border: none;\n        box-shadow: none;\n    }\n}\n\n/* Staff Notes Styles */\n.note-item {\n    border-left: 4px solid #007bff;\n    padding: 0.5rem;\n    margin-bottom: 0.5rem;\n    background-color: #f8f9fa;\n    border-radius: 0 0.25rem 0.25rem 0;\n}\n\n.note-item.followup { border-left-color: #007bff; }\n.note-item.reminder { border-left-color: #ffc107; }\n.note-item.issue { border-left-color: #dc3545; }\n.note-item.resolved { border-left-color: #28a745; }\n\n.note-header {\n    font-size: 0.875rem;\n    color: #6c757d;\n    margin-bottom: 0.25rem;\n}\n\n.note-content {\n    margin: 0;\n}\n\n.status-badge {\n    font-size: 0.8em;\n}","size_bytes":8761},"static/print.css":{"content":"/* Print-specific styles */\n@media print {\n    /* Hide non-essential elements */\n    .no-print {\n        display: none !important;\n    }\n    \n    /* Show print-only elements */\n    .print-only {\n        display: block !important;\n    }\n    \n    /* Page setup */\n    @page {\n        margin: 0.5in;\n        size: A4;\n    }\n    \n    /* Body styles */\n    body {\n        font-size: 12pt;\n        line-height: 1.4;\n        color: black !important;\n        background: white !important;\n    }\n    \n    /* Remove shadows and borders */\n    .card {\n        border: none !important;\n        box-shadow: none !important;\n        background: white !important;\n    }\n    \n    .card-body {\n        padding: 0 !important;\n    }\n    \n    /* Table styles */\n    table {\n        border-collapse: collapse !important;\n    }\n    \n    table, th, td {\n        border: 1px solid black !important;\n    }\n    \n    /* Heading styles */\n    h1, h2, h3, h4, h5, h6 {\n        color: black !important;\n        page-break-after: avoid;\n    }\n    \n    /* Prevent page breaks */\n    .card-body {\n        page-break-inside: avoid;\n    }\n    \n    /* Badge styles for print */\n    .badge {\n        border: 1px solid black !important;\n        background: white !important;\n        color: black !important;\n        padding: 2px 4px !important;\n    }\n    \n    /* Button styles (just in case) */\n    .btn {\n        display: none !important;\n    }\n    \n    /* Ensure text is black */\n    * {\n        color: black !important;\n        background: white !important;\n    }\n    \n    /* Special handling for text-muted */\n    .text-muted {\n        color: #666 !important;\n    }\n    \n    /* HR styles */\n    hr {\n        border: 1px solid black !important;\n        margin: 10px 0 !important;\n    }\n}\n\n/* Receipt specific print styles */\n@media print {\n    #receipt-content {\n        max-width: 400px;\n        margin: 0 auto;\n        font-size: 11pt;\n    }\n    \n    #bill-content {\n        font-size: 12pt;\n    }\n}\n","size_bytes":1967}}}